package com.example.shop_map;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

/**
 * This class is the List Activity - the main activity of ShopMap 
 * 
 */
public class MainActivity extends Activity {

	MyCustomAdapter dataAdapter = null;

	ArrayList<Item> myItems = new ArrayList<Item>();

	String products[] = {"Air Freshener","Aluminum Foil", "Ammonia","Apples", "Apple Sauce","Auto Supplies", "Baby Food", "Bacon", "Bags, lunch", "Bags, sandwich","Bags, storage","Bags, trash","Bags, vacuum","Bagels",
			"Bakery Goods", "Baking Powder","Baking Soda", "Bananas","Batteries", "Beans", "Beans, refried", "Beef, hamburger", "Beef Jerky", "Beef, roast", "Beef, steak", "Beer", "Beets", "Berries", "Biscuit Mix", "Bleach", "Bouillon cubes",
			"Bread crumbs", "Bread, French", "Bread", "Broccoli", "Broom", "Buns", "Butter", "Cabbage", "Cake", "Cake / brownie mix", "Candles", "Candy","Cards","Carpet Cleaner", "Carrots", "Celery", "Cereal",
			"Charcoal", "Cheese, block", "Cheese, cottage", "Cheese, parmesan", "Cheese, sliced", "Cheese, spread", "Cherries", "Chicken", "Chili", "Chili beans", "Chinese food", "Chips, potato", "Chips, tortilla",
			"Chocolate, baking", "Chocolate Chips","Cleaner", "Cleanser", "Cocoa", "Cocoa Mix", "Coconut", "Coffee", "Cookies", "Cooking Spray", "Corn","Corn meal", "Corn Starch", "Corn Syrup", "Crackers", "Cream Cheese", 
			"Cream, non-dairy", "Cream, whipping", "Croutons", "Cucumber", "Dessert", "Detergent, laundry","Dips", "Dishwasher soap","Drink Mix", "Eggs", "Evaporated Milk", "Fish", "Flour", "Fruit, canned", "Fruit, dried",
			"Fruit, fresh", "Fruit, frozen", "Garlic", "Gelatin", "Graham Crackers", "Granola Bars", "Grapefruit", "Gravy", "Green Pepper", "Gum", "Ham", "Honey", "Hot Dogs", "Ice, block, cube", "Ice Cream", "Ice Cream Cones",
			"Ice Cream Toppings", "Jam / Jelly", "Juice, bottled", "Juice, frozen", "Ketchup", "Lemons", "Lemon Juice", "Lettuce"};


	@Override
	/**
	 * This function is executed when the app is opened
	 * @param A bundle containing the saved state of the app
	 */
	protected void onCreate(Bundle savedInstanceState) {

		//call the parent implementation
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);

		//Generate list View from ArrayList
		displayListView();

		checkButtonClick();
	}

	private void displayListView() {
		//Array list of countries
		ArrayList<Item> itemList = new ArrayList<Item>();


		//create an ArrayAdaptar from the String Array
		dataAdapter = new MyCustomAdapter(this,R.layout.item_view, itemList);

		ListView listView = (ListView) findViewById(R.id.list_view);
		EditText inputSearch = (EditText) findViewById(R.id.inputSearch);
		// Assign adapter to ListView
		listView.setAdapter(dataAdapter);

		/**
		 * Enabling Search Filter
		 * */
		inputSearch.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {
				// When user changed the Text
				MainActivity.this.dataAdapter.getFilter().filter(cs);	
			}


			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
					int arg3) {
				// TODO Auto-generated method stub

			}



			@Override
			public void afterTextChanged(Editable arg0) {
				// TODO Auto-generated method stub

			}

		});


		listView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// When clicked, show a toast with the TextView text
				Item item = (Item) parent.getItemAtPosition(position);
				Toast.makeText(getApplicationContext(),
						"Clicked on Row: " + item.getName(), 
						Toast.LENGTH_LONG).show();
			}
		});

	}

	private class MyCustomAdapter extends ArrayAdapter<Item> implements Filterable {

		private ArrayList<Item> itemList;
		private ArrayList<String> allItems;

		public MyCustomAdapter(Context context, int textViewResourceId, 
				ArrayList<Item> itemList) {
			super(context, textViewResourceId, itemList);
			this.itemList = new ArrayList<Item>();
			this.itemList.addAll(itemList);

		}

		private class ViewHolder {
			//TextView code;
			CheckBox name;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {

			ViewHolder holder = null;
			Log.v("ConvertView", String.valueOf(position));

			if (convertView == null) {
				LayoutInflater vi = (LayoutInflater)getSystemService(
						Context.LAYOUT_INFLATER_SERVICE);
				convertView = vi.inflate(R.layout.item_view, null);

				holder = new ViewHolder();
				//holder.code = (TextView) convertView.findViewById(R.id.textView1);
				holder.name = (CheckBox) convertView.findViewById(R.id.checkBox1);
				convertView.setTag(holder);

				holder.name.setOnClickListener( new View.OnClickListener() {  
					public void onClick(View v) {  
						CheckBox cb = (CheckBox) v ;  
						Item item = (Item) cb.getTag();  
						Toast.makeText(getApplicationContext(),
								"Clicked on Checkbox: " + cb.getText() +
								" is " + cb.isChecked(), 
								Toast.LENGTH_LONG).show();
						item.setSelected(cb.isChecked());
					}  
				});  
			} 
			else {
				holder = (ViewHolder) convertView.getTag();
			}

			if(itemList.size() > position) {
				Item item = itemList.get(position);
				//holder.code.setText(" (" +  item.getID() + ")");
				holder.name.setText(item.getName());
				holder.name.setChecked(item.isSelected());
				holder.name.setTag(item);
			}

			return convertView;

		}

		@Override
		public Filter getFilter() {
			Filter filter = new Filter() {

				@SuppressWarnings("unchecked")
				@Override
				protected void publishResults(CharSequence constraint, FilterResults results) {
					ArrayList<String> items = (ArrayList<String>) results.values; // has the filtered values
					//itemList.removeAll(itemList); 
					if(constraint == null || constraint.length() == 0) {
						dataAdapter.addAll(itemList);
					}
					else {
						for(int i=0; i<itemList.size(); i++) {
							if(!items.contains(itemList.get(i).getName())) {
								dataAdapter.remove(itemList.get(i));
							}
						}
					}
				
					dataAdapter.notifyDataSetChanged();  // notifies the data with new filtered values
				}

				@Override
				protected FilterResults performFiltering(CharSequence constraint) {
					FilterResults results = new FilterResults();        // Holds the results of a filtering operation in values
					ArrayList<String> FilteredArrList = new ArrayList<String>();

					if (allItems == null) {
						allItems = new ArrayList<Item>(); // saves the original data in itemNames
						for(Item i: itemList) {
							allItems.add(i);
						}
					}

					/********
					 * 
					 *  If constraint(CharSequence that is received) is null returns the original values
					 *  else does the Filtering and returns FilteredArrList(Filtered)  
					 *
					 ********/
					if (constraint == null || constraint.length() == 0) {

						// set the Original result to return  
						results.count = itemNames.size();
						results.values = itemNames;
					} else {
						constraint = constraint.toString().toLowerCase();
						for (int i = 0; i < itemNames.size(); i++) {
							String data = itemNames.get(i);
							if (data.toLowerCase().startsWith(constraint.toString())) {
								FilteredArrList.add(data);
							}
						}
						// set the Filtered result to return
						results.count = FilteredArrList.size();
						results.values = FilteredArrList;
					}
					return results;
				}
			};
			return filter;
		}
	}


	private void checkButtonClick() {


		Button myButton = (Button) findViewById(R.id.button1);
		myButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				StringBuffer responseText = new StringBuffer();
				responseText.append("The following were selected...\n");

				myItems.removeAll(myItems);

				ArrayList<Item> itemList = dataAdapter.itemList;
				for(int i=0;i<itemList.size();i++){
					Item item = itemList.get(i);
					if(item.isSelected()) {
						myItems.add(item);
					}
				}

				Intent intent = new Intent(MainActivity.this, ItemsActivity.class);
				intent.putParcelableArrayListExtra("selectedItems", myItems);
				MainActivity.this.startActivity(intent);

				Toast.makeText(getApplicationContext(),
						responseText, Toast.LENGTH_LONG).show();


			}
		});

	}


	@Override
	/**
	 * This function inflates the menu - it adds items to the action bar if it is present.
	 * @return true if the menu was successfully inflated
	 */
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}


}
